#!/usr/bin/env bash

###############################################
# Installing Tensorflow 1.13.1 with MKL
#
# by Owain Kenway, 2018
#

NAME=${NAME:-tensorflow}
VERSION=${VERSION:-1.13.1}
TYPE=${TYPE:-mkl}
INSTALL_PREFIX=${INSTALL_PREFIX:-${HOME}/Applications/${NAME}/$VERSION/$TYPE}

# NOTE:
# On myriad, we need to pass -march=broadwell because although it is Skylake
# a) Tensorflow is not supported with AVX 512
# b) AVX512 breaks EIGEN.
#
# We need to set both -cxxopt values so that EIGEN builds with any version 
# AVX.
# 
# Building with -march=nehalem *probably* makes things work on all nodes on
# Legion but I've not tested it.
MARCH=${MARCH:-native}
CONFIG_OPTS="--config=mkl --copt=-march=${MARCH} --cxxopt=-fabi-version=0 --cxxopt=-D_GLIBCXX_USE_CXX11_ABI=0"

SRC_ARCHIVE=${SRC_ARCHIVE:-https://github.com/tensorflow/tensorflow}

initdir=`pwd`

set -e

dirname=$(dirname $0 2>/dev/null)
#INCLUDES_DIR=${INCLUDES_DIR:-${dirname}/includes}
INCLUDES_DIR=${INCLUDES_DIR:-/shared/ucl/apps/build_scripts/includes}
source ${INCLUDES_DIR}/require_inc.sh
user_name=`whoami`

require gcc-libs/4.9.2
require compilers/gnu/4.9.2
#require python/3.7.2
require java/openjdk-11
#require bazel/0.21.0
export PATH=${HOME}/Applications/python-3.7.2-rpath/bin:${HOME}/Applications/bazel-0.19.2/bin:$PATH

# Delete the old install, clear the bazel cache and any old builds in /dev/shm
echo "Cleaning old install"
rm -rf $INSTALL_PREFIX /dev/shm/${user_name}/tensorflow ~/.cache/bazel
#rm -rf /dev/shm/${user_name}/tensorflow #~/.cache/bazel


# Build in /dev/shm for speed and space.
mkdir -p /dev/shm/${user_name}/${NAME}
temp_dir=`mktemp -d -p /dev/shm/${user_name}/${NAME}`
cd $temp_dir

# Set up our environment.
# This is a cludge, I know.
virtualenv $INSTALL_PREFIX
source $INSTALL_PREFIX/bin/activate
pip3 install tensorflow==${VERSION}
pip3 uninstall -y tensorflow

export PYTHON_BIN_PATH=`which python3`
export PYTHON_LIB_PATH=${INSTALL_PREFIX}/lib/python3.7/site-packages

# Checkout the version of tensorflow we want.
git clone $SRC_ARCHIVE
cd tensorflow
git checkout v$VERSION

# You should answer yes to jemalloc and nothing else.
export TF_NEED_JEMALLOC=1
export TF_NEED_GCP=0
export TF_NEED_HDFS=0
export TF_NEED_S3=0
export TF_NEED_KAFKA=0
export TF_ENABLE_XLA=0
export TF_NEED_GDR=0
export TF_NEED_VERBS=0
export TF_DOWNLOAD_CLANG=0
export TF_NEED_OPENCL_SYCL=0
export TF_NEED_CUDA=0
export TF_CUDA_CLANG=0
export TF_NEED_MPI=0
export TF_SET_ANDROID_WORKSPACE=0
export TF_NEED_COMPUTECPP=0
export CC_OPT_FLAGS=" -march=${MARCH} "
export TF_NEED_ROCM=0

./configure

# It's not clear this fix for curl is still needed but just in case.
sed -i.bak 's|"#  define HAVE_STROPTS_H 1",||g' third_party/curl.BUILD
rm third_party/curl.BUILD.bak

# Fix SWIG
sed -i.bak 's|executable = ctx.executable._swig,|executable=ctx.executable._swig, use_default_shell_env=True,|g' tensorflow/tensorflow.bzl


cp ~/Source/install-scripts/scripts/tensorflow/flatbuffers.BUILD.bazel third_party/flatbuffers/BUILD.bazel
cp ~/Source/install-scripts/scripts/tensorflow/protobuf-owain.patch third_party/protobuf/
cp ~/Source/install-scripts/scripts/tensorflow/tf.workspace.bzl tensorflow/workspace.bzl


# Build our pip wheel
bazel build --verbose_failures --linkopt="-Wl,-rpath=/shared/ucl/apps/gcc/4.9.2/lib64" $CONFIG_OPTS //tensorflow/tools/pip_package:build_pip_package
bazel-bin/tensorflow/tools/pip_package/build_pip_package $temp_dir/tf_pip

cd $temp_dir

builtname=`ls $temp_dir/tf_pip/tensorflow-$VERSION-*.whl`
base_builtname=`basename $builtname`

cd $temp_dir/tf_pip/

# Backup copy
cp $base_builtname $INSTALL_PREFIX

pip3 install $base_builtname

# De-venv it.
#rm -rf ${INSTALL_PREFIX}/bin/pip*
#rm -rf ${INSTALL_PREFIX}/bin/python*
#rm -rf ${INSTALL_PREFIX}/bin/activate*
#rm -rf ${INSTALL_PREFIX}/bin/easy_install*

echo "Cleaning install"
rm -rf /dev/shm/${user_name}/tensorflow ~/.cache/bazel

